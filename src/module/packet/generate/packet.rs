use std::path::Path;

use crate::module::{packet::codecs::PacketInfo, Packets};

impl Packets {
    const PACKET_TEMPLATE: &str = r#"//! This file is auto-generated. Disable this by adding an `@manual` tag.
//!
//! @generated by {COMMIT_HASH}

#[cfg(feature = "bevy")]
use bevy_reflect::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "bevy", derive(Reflect), reflect(Debug, Clone, PartialEq, Hash))]
#[cfg_attr(feature = "io", derive(froglight_macros::FrogBuf))]
pub struct {STRUCT} {}
"#;

    /// Generate a `{name}.rs` file for the given packet.
    pub(super) async fn generate_packet_module(
        id: usize,
        name: &str,
        direction: &str,
        packet: &PacketInfo,
        path: &Path,
    ) -> anyhow::Result<()> {
        let file_name = super::packet_file(id, name, direction);
        let file_path = path.join(&file_name);

        // Skip packet generation if the file already exists and contains `@manual`
        if let Ok(existing) = tokio::fs::read_to_string(path).await {
            if existing.contains("@manual @generated") {
                return Ok(());
            }
        }

        let contents =
            Self::PACKET_TEMPLATE.replace("{STRUCT}", &super::packet_struct(packet, direction));

        tokio::fs::write(&file_path, contents).await?;

        Ok(())
    }
}

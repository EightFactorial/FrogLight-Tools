use std::sync::LazyLock;

use convert_case::{Case, Casing};
use froglight_generate::{CliArgs, DataMap};
use hashbrown::{HashMap, HashSet};

static METADATA_TYPES: LazyLock<&[(&str, &str)]> = LazyLock::new(|| &[]);

pub(super) async fn generate_metadata(datamap: &DataMap, args: &CliArgs) -> anyhow::Result<()> {
    // Sort the versions using the manifest.
    let mut versions: Vec<_> = datamap.version_data.keys().collect();
    versions.sort_by(|a, b| datamap.manifest.compare(a, b).unwrap());

    // Collect the latest data for all entities.
    let mut entities = HashMap::new();
    for data in datamap.version_data.values() {
        for entity in data.entities.iter() {
            entities.insert(&entity.name, entity);
        }
    }

    // Get all of the metadata keys.
    let mut metadata = HashSet::new();
    for entity in entities.values() {
        metadata.extend(entity.metadata.iter());
    }

    // Sort the metadata by name.
    let mut metadata = metadata.into_iter().collect::<Vec<_>>();
    metadata.sort();

    let mut metadata_content = String::new();
    for (index, meta) in metadata.iter().enumerate() {
        let ident = meta.to_case(Case::Pascal);
        metadata_content.push_str(&format!("    {ident} => "));

        if let Some(type_data) = METADATA_TYPES.iter().find(|(key, _)| key == meta) {
            metadata_content.push_str(&format!("({})", type_data.0));

            if index < metadata.len() - 1 {
                metadata_content.push_str(",\n");
            }
        } else if index < metadata.len() - 1 {
            tracing::warn!("EntityGenerator: Metadata type not found for \"{ident}\"");
            metadata_content.push_str("(), // TODO: Type Data\n");
        } else {
            tracing::warn!("EntityGenerator: Metadata type not found for \"{ident}\"");
            metadata_content.push_str("() // TODO: Type Data");
        }
    }

    let content = format!(
        r"//! Generated types for entity components.
//!
//! @generated by 'TODO'

froglight_macros::impl_generated_components! {{
{metadata_content}
}}
"
    );

    let file_path = args.dir.join("crates/froglight-entity/src/generated/component.rs");
    if !file_path.exists() {
        tracing::warn!("EntityGenerator: Creating file \"{}\"", file_path.display());
        tokio::fs::create_dir_all(file_path.parent().unwrap()).await?;
    }
    tokio::fs::write(file_path, &content).await?;

    Ok(())
}
